"""create booking models: payments, ticket_holders, ticket_instances, orders

Revision ID: 16b4e2881046
Revises: 1a47d9f6fbd0
Create Date: 2025-08-08 14:57:10.024093

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '16b4e2881046'
down_revision: Union[str, Sequence[str], None] = '1a47d9f6fbd0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('payment_methods',
    sa.Column('id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('orders',
    sa.Column('id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), server_default='0', nullable=False),
    sa.Column('reserved_until', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'AWAITING_PAYMENT', 'COMPLETED', 'CANCELLED', name='order_status'), server_default='PENDING', nullable=False),
    sa.Column('invoice_requested', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('total_price >= 0', name='chk_total_price_nonneg'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_reserved_until'), 'orders', ['reserved_until'], unique=False)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('payment_method_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('provider', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', name='payment_status'), server_default='PENDING', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('paid_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint('amount >= 0', name='chk_amount_nonneg'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_order_id'), 'payments', ['order_id'], unique=False)
    op.create_index(op.f('ix_payments_payment_method_id'), 'payments', ['payment_method_id'], unique=False)
    op.create_table('ticket_instances',
    sa.Column('id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('event_ticket_type_id', sa.Integer(), nullable=False),
    sa.Column('seat_id', sa.Integer(), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('reserved_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
    sa.ForeignKeyConstraint(['event_ticket_type_id'], ['event_ticket_types.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['seat_id'], ['seats.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_id', 'seat_id', name='uq_event_seat')
    )
    op.create_index(op.f('ix_ticket_instances_event_id'), 'ticket_instances', ['event_id'], unique=False)
    op.create_index(op.f('ix_ticket_instances_event_ticket_type_id'), 'ticket_instances', ['event_ticket_type_id'], unique=False)
    op.create_index(op.f('ix_ticket_instances_order_id'), 'ticket_instances', ['order_id'], unique=False)
    op.create_index(op.f('ix_ticket_instances_seat_id'), 'ticket_instances', ['seat_id'], unique=False)
    op.create_table('ticket_holders',
    sa.Column('id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('ticket_instance_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.Text(), nullable=False),
    sa.Column('last_name', sa.Text(), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('identification_number', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('birth_date <= CURRENT_DATE', name='chk_holder_birth_not_future'),
    sa.ForeignKeyConstraint(['ticket_instance_id'], ['ticket_instances.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ticket_holders_ticket_instance_id'), 'ticket_holders', ['ticket_instance_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ticket_holders_ticket_instance_id'), table_name='ticket_holders')
    op.drop_table('ticket_holders')
    op.drop_index(op.f('ix_ticket_instances_seat_id'), table_name='ticket_instances')
    op.drop_index(op.f('ix_ticket_instances_order_id'), table_name='ticket_instances')
    op.drop_index(op.f('ix_ticket_instances_event_ticket_type_id'), table_name='ticket_instances')
    op.drop_index(op.f('ix_ticket_instances_event_id'), table_name='ticket_instances')
    op.drop_table('ticket_instances')
    op.drop_index(op.f('ix_payments_payment_method_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_order_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_reserved_until'), table_name='orders')
    op.drop_table('orders')
    op.drop_table('payment_methods')
    # ### end Alembic commands ###
